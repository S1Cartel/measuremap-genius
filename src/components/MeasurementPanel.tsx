
import { Button } from '@/components/ui/button';
import { Download, MapPin, Globe, Ruler, Circle as CircleIcon, Route } from 'lucide-react';
import type { Measurement } from '../pages/Index';
import { jsPDF } from 'jspdf';
import ComparisonPanel from './ComparisonPanel';

interface MeasurementPanelProps {
  measurement: Measurement | null;
}

const MeasurementPanel = ({ measurement }: MeasurementPanelProps) => {
  const generatePDF = () => {
    if (!measurement) return;

    const doc = new jsPDF();
    
    doc.setFontSize(24);
    doc.setTextColor(139, 69, 19);
    doc.text('🌍 GeoAnalyzer Pro Report', 20, 25);
    
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated on: ${new Date().toLocaleString()}`, 20, 35);
    
    if (measurement.location) {
      doc.setFontSize(14);
      doc.setTextColor(0, 0, 0);
      doc.text('📍 Location:', 20, 50);
      doc.setFontSize(12);
      doc.text(measurement.location, 20, 60);
    }
    
    doc.setFontSize(16);
    doc.setTextColor(139, 69, 19);
    doc.text('📏 Measurements', 20, 80);
    
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    
    if (measurement.type === 'polygon' || measurement.type === 'circle') {
      const areaHectares = (measurement.area! / 10000);
      const areaAcres = areaHectares * 2.471;
      const areaSqFt = measurement.area! * 10.764;
      
      doc.text(`Area: ${measurement.area!.toFixed(2)} m²`, 25, 95);
      doc.text(`Area: ${areaHectares.toFixed(4)} hectares`, 25, 105);
      doc.text(`Area: ${areaAcres.toFixed(4)} acres`, 25, 115);
      doc.text(`Area: ${areaSqFt.toFixed(2)} sq ft`, 25, 125);
      
      if (measurement.perimeter) {
        doc.text(`Perimeter: ${measurement.perimeter.toFixed(2)} meters`, 25, 140);
        doc.text(`Perimeter: ${(measurement.perimeter / 1000).toFixed(3)} km`, 25, 150);
      }
      
      if (measurement.radius) {
        doc.text(`Radius: ${measurement.radius.toFixed(2)} meters`, 25, 155);
      }
    } else if (measurement.type === 'line') {
      doc.text(`Distance: ${measurement.distance!.toFixed(2)} meters`, 25, 95);
      doc.text(`Distance: ${(measurement.distance! / 1000).toFixed(3)} km`, 25, 105);
      doc.text(`Distance: ${((measurement.distance! / 1000) * 0.621371).toFixed(3)} miles`, 25, 115);
    }
    
    if (measurement.center_point) {
      doc.setFontSize(16);
      doc.setTextColor(139, 69, 19);
      doc.text('🎯 Center Coordinates', 20, 180);
      
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      doc.text(`Latitude: ${measurement.center_point[1].toFixed(6)}°`, 25, 195);
      doc.text(`Longitude: ${measurement.center_point[0].toFixed(6)}°`, 25, 205);
    }
    
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text('Generated by GeoAnalyzer Pro - Advanced Geospatial Analysis Tool', 20, 280);
    
    doc.save('geoanalyzer-pro-report.pdf');
  };

  const getIcon = () => {
    if (!measurement) return <Globe className="h-4 w-4 text-violet-400" />;
    switch (measurement.type) {
      case 'polygon': return <Globe className="h-4 w-4 text-violet-400" />;
      case 'circle': return <CircleIcon className="h-4 w-4 text-emerald-400" />;
      case 'line': return <Route className="h-4 w-4 text-amber-400" />;
      default: return <Globe className="h-4 w-4 text-violet-400" />;
    }
  };

  const getGradient = () => {
    if (!measurement) return "from-violet-900/50 to-purple-900/50";
    switch (measurement.type) {
      case 'polygon': return "from-violet-900/50 to-purple-900/50";
      case 'circle': return "from-emerald-900/50 to-teal-900/50";
      case 'line': return "from-amber-900/50 to-orange-900/50";
      default: return "from-violet-900/50 to-purple-900/50";
    }
  };

  return (
    <div className="w-96 bg-gradient-to-b from-gray-900 to-black text-white p-6 shadow-2xl overflow-y-auto border-l border-violet-700/50">
      <h2 className="text-2xl font-bold mb-6 text-center bg-gradient-to-r from-violet-400 to-purple-400 bg-clip-text text-transparent">
        📊 GeoAnalyzer Pro
      </h2>
      
      {measurement ? (
        <div className="space-y-6">
          {measurement.location && (
            <div className="bg-gray-800/50 p-4 rounded-xl border border-gray-700">
              <div className="flex items-center gap-2 mb-2">
                <MapPin className="h-4 w-4 text-violet-400" />
                <h3 className="text-sm font-medium text-gray-300">Location</h3>
              </div>
              <p className="text-sm text-violet-300">{measurement.location}</p>
            </div>
          )}

          <div className="space-y-4">
            {(measurement.type === 'polygon' || measurement.type === 'circle') && measurement.area && (
              <div className={`bg-gradient-to-br ${getGradient()} p-4 rounded-xl border border-current/50`}>
                <div className="flex items-center gap-2 mb-2">
                  {getIcon()}
                  <h3 className="text-sm font-medium text-gray-300">
                    {measurement.type === 'polygon' ? 'Area Analysis' : 'Circle Analysis'}
                  </h3>
                </div>
                <div className="space-y-2">
                  <p className="text-lg font-bold text-white">
                    {(measurement.area / 10000).toFixed(4)} hectares
                  </p>
                  <p className="text-sm text-gray-400">
                    {measurement.area.toFixed(2)} m²
                  </p>
                  <p className="text-sm text-gray-400">
                    {((measurement.area / 10000) * 2.471).toFixed(4)} acres
                  </p>
                  <p className="text-sm text-gray-400">
                    {(measurement.area * 10.764).toFixed(2)} sq ft
                  </p>
                  {measurement.radius && (
                    <p className="text-sm text-gray-400">
                      Radius: {measurement.radius.toFixed(2)} m
                    </p>
                  )}
                </div>
              </div>
            )}
            
            {measurement.perimeter && (
              <div className="bg-gradient-to-br from-green-900/50 to-emerald-900/50 p-4 rounded-xl border border-green-700/50">
                <div className="flex items-center gap-2 mb-2">
                  <Ruler className="h-4 w-4 text-emerald-400" />
                  <h3 className="text-sm font-medium text-gray-300">Perimeter Analysis</h3>
                </div>
                <div className="space-y-2">
                  <p className="text-lg font-bold text-emerald-300">
                    {(measurement.perimeter / 1000).toFixed(3)} km
                  </p>
                  <p className="text-sm text-gray-400">
                    {measurement.perimeter.toFixed(2)} meters
                  </p>
                  <p className="text-sm text-gray-400">
                    {((measurement.perimeter / 1000) * 0.621371).toFixed(3)} miles
                  </p>
                  <p className="text-sm text-gray-400">
                    {(measurement.perimeter * 3.28084).toFixed(2)} feet
                  </p>
                </div>
              </div>
            )}

            {measurement.type === 'line' && measurement.distance && (
              <div className="bg-gradient-to-br from-amber-900/50 to-orange-900/50 p-4 rounded-xl border border-amber-700/50">
                <div className="flex items-center gap-2 mb-2">
                  <Route className="h-4 w-4 text-amber-400" />
                  <h3 className="text-sm font-medium text-gray-300">Distance Analysis</h3>
                </div>
                <div className="space-y-2">
                  <p className="text-lg font-bold text-amber-300">
                    {(measurement.distance / 1000).toFixed(3)} km
                  </p>
                  <p className="text-sm text-gray-400">
                    {measurement.distance.toFixed(2)} meters
                  </p>
                  <p className="text-sm text-gray-400">
                    {((measurement.distance / 1000) * 0.621371).toFixed(3)} miles
                  </p>
                  <p className="text-sm text-gray-400">
                    {(measurement.distance * 3.28084).toFixed(2)} feet
                  </p>
                </div>
              </div>
            )}

            {measurement.center_point && (
              <div className="bg-gradient-to-br from-purple-900/50 to-pink-900/50 p-4 rounded-xl border border-purple-700/50">
                <h3 className="text-sm font-medium text-gray-300 mb-2">🎯 Center Coordinates</h3>
                <div className="space-y-1">
                  <p className="text-sm text-purple-300">
                    Lat: {measurement.center_point[1].toFixed(6)}°
                  </p>
                  <p className="text-sm text-purple-300">
                    Lng: {measurement.center_point[0].toFixed(6)}°
                  </p>
                </div>
              </div>
            )}

            {measurement.area && <ComparisonPanel area={measurement.area} />}
          </div>

          <Button onClick={generatePDF} className="w-full bg-gradient-to-r from-violet-600 to-purple-600 hover:from-violet-700 hover:to-purple-700 text-white rounded-xl">
            <Download className="mr-2 h-4 w-4" />
            Download Detailed Report
          </Button>
        </div>
      ) : (
        <div className="text-center text-gray-400">
          <div className="mb-4">
            <Globe className="h-12 w-12 mx-auto text-violet-400 opacity-50" />
          </div>
          <p className="mb-2">No analysis data yet.</p>
          <p className="text-sm">Search for a location and start measuring to see detailed geospatial analysis.</p>
        </div>
      )}
    </div>
  );
};

export default MeasurementPanel;
